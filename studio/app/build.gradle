apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'

android {
    def buildNumber = System.getenv("BUILD_NUMBER") ?: 1
    compileSdkVersion rootProject.targetSdk
    buildToolsVersion rootProject.buildTools

    defaultConfig {
        applicationId "nl.sogeti.android.gpstracker"
        minSdkVersion rootProject.minSdk
        targetSdkVersion rootProject.targetSdk
        versionCode rootProject.appVersionCode
        versionName rootProject.appVersionName
        buildConfigField "int", "BUILD_NUMBER", buildNumber as String
        buildConfigField "String", "GIT_COMMIT", "\"" + (System.getenv("GIT_COMMIT") ?: "unknown") + "\"" as String
        archivesBaseName = "opengpstracker-ng-$versionName"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    apply from: '../flavors.gradle'
    productFlavors {
        develop {
            applicationIdSuffix = ".develop"
        }
        mock {
            applicationIdSuffix = ".mock"
        }
    }

    apply from: '../signing.gradle'

    buildTypes {
        debug {
            testCoverageEnabled false
        }
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    dataBinding {
        enabled = true
    }

    lintOptions {
        disable 'InvalidPackage'
        abortOnError false
    }

    testOptions {
        unitTests.returnDefaultValues = true
        animationsDisabled = true
    }

    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
}

configurations.all {
    resolutionStrategy {
        force 'androidx.lifecycle:lifecycle-viewmodel:2.0.0'
        force 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0'
        force 'androidx.fragment:fragment:1.0.0'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    api project(':features')
    implementation project(':service')
    implementation project(':base')
    implementation project(':utils')
    implementation project(':wear-shared')

    implementation libraries.kotlin.stdlib
    implementation libraries.android.annotation
    implementation libraries.android.dagger
    implementation libraries.google.firebasecore
    implementation(libraries.google.crashlytics) {
        transitive = true
    }
    kapt libraries.android.daggercompiler
    kapt libraries.android.databindingcompiler

    testImplementation libraries.test.junit
    testImplementation libraries.test.mockito
    testImplementation libraries.test.robolectric

    testImplementation libraries.square.leakcanarynoop

    androidTestMockImplementation libraries.androidtest.uiautomator
    androidTestImplementation libraries.androidtest.runner
    androidTestImplementation libraries.androidtest.rules
    androidTestImplementation libraries.androidtest.espresso_core
    androidTestImplementation libraries.androidtest.espresso_contrib
    kapt libraries.androidtest.runner
    androidTestImplementation libraries.square.timber
    androidTestImplementation libraries.google.play_services_maps
}

apply plugin: 'com.google.gms.google-services'
